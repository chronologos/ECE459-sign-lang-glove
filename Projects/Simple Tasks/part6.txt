#include "mbed.h"                    
#include <nrk.h>
#include <include.h>
#include <ulib.h>
#include <stdio.h>
#include <hal.h>
#include <nrk_error.h>
#include <nrk_timer.h>
#include <nrk_stack_check.h>
#include <nrk_stats.h>


// Static stack for Task1
NRK_STK Stack1[NRK_APP_STACKSIZE];
// Static stack for Task1
NRK_STK Stack2[NRK_APP_STACKSIZE];
// Static stack for Task1
NRK_STK Stack3[NRK_APP_STACKSIZE];
// Static stack for Task1
NRK_STK Stack4[NRK_APP_STACKSIZE];
// Task1 declaration
nrk_task_type TaskOne;
nrk_task_type TaskTwo;
nrk_task_type TaskThree;
nrk_task_type TaskFour;
void Task1(void);
// Function creates taskset
void nrk_create_taskset();

// You do not need to modify this function
struct __FILE { int handle; };

DigitalOut led1(p26);
DigitalOut led2(p27);
DigitalOut led3(p28);
DigitalOut led4(p29);
// Main function
int main(void)
{
	nrk_setup_ports();	
	nrk_init();
	nrk_create_taskset();
	nrk_start();
	return 0;
}

// Task1 body
void Task1()
{
	DigitalOut m(p27);
	while(1)
	{
		nrk_led_toggle(m);
		nrk_wait_until_next_period();
	}
}

// Task1 body
void Task2()
{
	while(1)
	{
		nrk_led_toggle(BLUE_LED);
		nrk_wait_until_next_period();
	}
}

// Task1 body
void Task3()
{
	while(1)
	{
		nrk_led_toggle(GREEN_LED);
		nrk_wait_until_next_period();
	}
}
// Task1 body
void Task4()
{
	while(1)
	{
		nrk_led_toggle(RED_LED);
		nrk_wait_until_next_period();
	}
}
// Function creates taskset
void nrk_create_taskset()
{
	
    nrk_task_set_entry_function( &TaskOne, Task1);
    nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
    TaskOne.prio = 2;
    TaskOne.FirstActivation = TRUE;
    TaskOne.Type = BASIC_TASK;
    TaskOne.SchType = PREEMPTIVE;
    TaskOne.period.secs = 0;
    TaskOne.period.nano_secs = 1000*NANOS_PER_MS;
    TaskOne.cpu_reserve.secs = 0;
    TaskOne.cpu_reserve.nano_secs = 0;
    TaskOne.offset.secs = 0;
    TaskOne.offset.nano_secs= 0;
    nrk_activate_task (&TaskOne);
	
		nrk_task_set_entry_function( &TaskTwo, Task2);
    nrk_task_set_stk( &TaskTwo, Stack2, NRK_APP_STACKSIZE);
    TaskTwo.prio = 2;
    TaskTwo.FirstActivation = TRUE;
    TaskTwo.Type = BASIC_TASK;
    TaskTwo.SchType = PREEMPTIVE;
    TaskTwo.period.secs = 0;
    TaskTwo.period.nano_secs = 500*NANOS_PER_MS;
    TaskTwo.cpu_reserve.secs = 0;
    TaskTwo.cpu_reserve.nano_secs = 0;
    TaskTwo.offset.secs = 0;
    TaskTwo.offset.nano_secs= 0;
    nrk_activate_task (&TaskTwo);
		
		nrk_task_set_entry_function( &TaskThree, Task3);
    nrk_task_set_stk( &TaskThree, Stack3, NRK_APP_STACKSIZE);
    TaskThree.prio = 2;
    TaskThree.FirstActivation = TRUE;
    TaskThree.Type = BASIC_TASK;
    TaskThree.SchType = PREEMPTIVE;
    TaskThree.period.secs = 0;
    TaskThree.period.nano_secs = 250*NANOS_PER_MS;
    TaskThree.cpu_reserve.secs = 0;
    TaskThree.cpu_reserve.nano_secs = 0;
    TaskThree.offset.secs = 0;
    TaskThree.offset.nano_secs= 0;
    nrk_activate_task (&TaskThree);
		
		nrk_task_set_entry_function( &TaskFour, Task4);
    nrk_task_set_stk( &TaskFour, Stack4, NRK_APP_STACKSIZE);
    TaskFour.prio = 2;
    TaskFour.FirstActivation = TRUE;
    TaskFour.Type = BASIC_TASK;
    TaskFour.SchType = PREEMPTIVE;
    TaskFour.period.secs = 0;
    TaskFour.period.nano_secs = 125*NANOS_PER_MS;
    TaskFour.cpu_reserve.secs = 0;
    TaskFour.cpu_reserve.nano_secs = 0;
    TaskFour.offset.secs = 0;
    TaskFour.offset.nano_secs= 0;
    nrk_activate_task (&TaskFour);
	
}
